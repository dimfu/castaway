package views

templ Index() {
	@Layout() {
		<h1>Castaway</h1>
		<form
			id="uploadForm"
			hx-post="/init-upload"
			hx-on::after-request="initUpload(event)"
			style="max-width: 500px; width: fit-content;"
		>
			<input type="text" name="secret" placeholder="Enter secret key for this session"/>
			<input id="fileInput" type="file" onchange="handleFileChange()"/>
			<input type="hidden" name="file_name"/>
			<input type="hidden" name="file_size"/>
			<input type="hidden" name="file_type"/>
			<button style="display: block; margin-top: 1rem; width: 100%;" type="submit">Upload</button>
		</form>
	}
	<script>
	let socket
	let clearedOnce

	document.addEventListener('DOMContentLoaded', function () {
		if (clearedOnce) return
		clearedOnce = true
		clearFormInputs()
	})

	function clearFileInput() {
		const fileInput = document.getElementById('fileInput')
		if (fileInput) {
			fileInput.value = ''
			fileInput.dispatchEvent(new Event('change', {bubbles: true}))
		}
	}

	function clearFormInputs() {
		const form = document.getElementById('uploadForm')
		if (form) {
			form.reset()
		}
	}

	function handleUploadSocket(socket, file, chunks) {
		socket.onopen = () => {
			console.info("Waiting for receiver")
		}
		socket.addEventListener("message", (event) => {
			const data = JSON.parse(event.data)
			switch (data.type) {
				case "start_download":
					console.log("Client triggered download, start uploading...")
					let offset = 0
					for (const chunk_size of chunks) {
						socket.send(file.slice(offset, offset + chunk_size))
						offset += chunk_size
					}
					clearFormInputs()
					window.currentUploadFile = null
					break
				default:
					console.log(data.type)
			}
		})
	}

	function handleFileChange() {
		const fileInput = document.getElementById("fileInput")
		const file = fileInput.files && fileInput.files.length > 0 ? fileInput.files[0] : null

		if (file) {
			console.log("File selected:", file.name, file.size, file.type)
			window.currentUploadFile = file
			const form = document.getElementById('uploadForm')
			form.querySelector('input[name="file_name"]').value = file.name
			form.querySelector('input[name="file_size"]').value = file.size
			form.querySelector('input[name="file_type"]').value = file.type
		} else {
			window.currentUploadFile = null
			const form = document.getElementById('uploadForm')
			form.querySelector('input[name="file_name"]').value = ''
			form.querySelector('input[name="file_size"]').value = ''
			form.querySelector('input[name="file_type"]').value = ''
		}
	}

	function initUpload(event) {
		const {xhr} = event.detail
		const file = window.currentUploadFile

		if (!file) {
			console.error("No file selected")
			return
		}

		console.log("Initializing upload for:", file.name)

		try {
			const data = JSON.parse(xhr.responseText)
			if (data.url && file) {
				const key = data.url.split("/").pop()
				const protocol = window.location.protocol === "https:" ? "wss" : "ws"
				socket = new WebSocket(`${protocol}://${window.location.host}/ws/${key}`)
				handleUploadSocket(socket, file, data.chunks, key)
			} else {
				throw new Error("Missing download url or file")
			}
		} catch (err) {
			console.error(err)
		}
	}
</script>
}
